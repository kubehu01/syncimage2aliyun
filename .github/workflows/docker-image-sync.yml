name: Docker Image Sync

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'images.txt'

jobs:
  sync-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to target Docker registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY }}
      
      - name: Sync images
        id: sync
        run: |
          echo "正在读取 images.txt..."
          echo "文件内容："
          cat images.txt
          echo ""
          
          failed_images=()
          success_images=()
          
          # 读取并处理每一行
          idx=0
          while IFS= read -r line; do
            # 跳过空行和注释
            if [[ -z "$line" ]] || [[ "$line" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            
            # 提取 platform 参数
            platform=""
            if [[ "$line" =~ --platform=([^[:space:]]+) ]]; then
              platform="${BASH_REMATCH[1]}"
              line=$(echo "$line" | sed 's/--platform=[^[:space:]]*//g')
            fi
            
            # 解析格式: <源镜像> to <目标镜像>:<标签>
            if [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+to[[:space:]]+([^[:space:]]+):([^[:space:]]+)$ ]]; then
              source="${BASH_REMATCH[1]}"
              target="${BASH_REMATCH[2]}"
              tag="${BASH_REMATCH[3]}"
              
              idx=$((idx + 1))
              full_target="${target}:${tag}"
              
              echo ""
              echo "========================================"
              echo "正在同步镜像 $idx: $source -> $full_target"
              [[ -n "$platform" ]] && echo "指定平台: $platform"
              echo "========================================"
              
              # 拉取镜像
              if [[ -n "$platform" ]]; then
                if docker pull --platform="$platform" "$source"; then
                  echo "✅ 拉取成功: $source"
                else
                  echo "❌ 拉取失败: $source"
                  failed_images+=("$source -> $full_target")
                  continue
                fi
              else
                if docker pull "$source"; then
                  echo "✅ 拉取成功: $source"
                else
                  echo "❌ 拉取失败: $source"
                  failed_images+=("$source -> $full_target")
                  continue
                fi
              fi
              
              # 标记镜像
              if docker tag "$source" "$full_target"; then
                echo "✅ 标记成功: $full_target"
              else
                echo "❌ 标记失败: $full_target"
                failed_images+=("$source -> $full_target")
                continue
              fi
              
              # 推送镜像
              if docker push "$full_target"; then
                echo "✅ 推送成功: $full_target"
                success_images+=("$source -> $full_target")
              else
                echo "❌ 推送失败: $full_target"
                failed_images+=("$source -> $full_target")
              fi
            fi
          done < images.txt
          
          echo ""
          echo "镜像总数: $idx"
          
          # 输出结果
          echo "========================================"
          echo "镜像同步完成"
          echo "成功: ${#success_images[@]}"
          echo "失败: ${#failed_images[@]}"
          echo "========================================"
          
          if [ ${#failed_images[@]} -gt 0 ]; then
            echo "失败的镜像："
            for img in "${failed_images[@]}"; do
              echo "  ❌ $img"
            done
            
            # 设置输出
            echo "failed=true" >> $GITHUB_OUTPUT
            echo "failed_list=${failed_images[*]}" >> $GITHUB_OUTPUT
            
            # 退出失败
            exit 1
          else
            echo "所有镜像同步成功！"
            echo "failed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Clean up
        if: always()
        run: |
          echo "清理本地镜像..."
          docker image prune -f
          docker system prune -f
      
      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.sync.outputs.failed }}" = "true" ]; then
            echo "❌ 部分镜像同步失败"
            echo "${{ steps.sync.outputs.failed_list }}"
            exit 1
          else
            echo "✅ 所有镜像同步成功"
          fi

